AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Escenario 1 - Lambda expuesta con URL pública que guarda datos en DynamoDB

Parameters:
  AppName:
    Type: String
    Description: Nombre de la aplicación o demo.
  Account:
    Type: String
  Environment:
    Type: String
    AllowedValues:
      - dev
      - tst
      - prod
  LambdaName:
    Type: String
    Description: Nombre base de la Lambda
  pPythonVersion:
    Type: String
    Default: python3.10

Resources:
  #? Tabla DynamoDB para guardar registros
  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        !Join [
          '-',
          [!Ref Account, !Ref Environment, !Ref AppName, 'events-table'], #? Tambien se puede guardar 'events-table' pero buena practica es añadir ambiente y appname..
        ]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #? Role para la Lambda con permisos para logs y DynamoDB
  LambdaToDynamoRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join [
          '-',
          [!Ref Account, !Ref Environment, !Ref LambdaName, 'lambda-url-role'],
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ['-', [!Ref LambdaName, 'dynamodb-put']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt EventsTable.Arn

  #? Log group de la Lambda
  LambdaToDynamoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref LambdaToDynamoFunction]]
      RetentionInDays: 1

  #? Lambda Function expuesta con URL pública
  LambdaToDynamoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: !Ref pPythonVersion
      FunctionName:
        !Join [
          '-',
          [!Ref Account, !Ref Environment, !Ref LambdaName, 'LambdaToDynamo'],
        ]
      CodeUri: functions/lambda_to_dynamo
      Handler: function.lambda_handler
      MemorySize: 256
      Timeout: 10
      Role: !GetAtt LambdaToDynamoRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventsTable
          AWS_ENDPOINT_URL: http://host.docker.internal:4566
      FunctionUrlConfig:
        AuthType: NONE   #? <- Esta linea nos permite generar la URL publica o se puede privatizar.
