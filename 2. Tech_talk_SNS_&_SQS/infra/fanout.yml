AWSTemplateFormatVersion: "2010-09-09"
Description: "SNS fanout -> SQS con filtros + Lambdas"

Parameters:
  CodeBucket:
    Type: String
    Default: cf-code

Resources:
  DemoTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: demo-fanout-topic

  # Fulfillment
  FulfillDLQ: { Type: AWS::SQS::Queue, Properties: { QueueName: demo-fulfill-sqs-dlq } }
  FulfillQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: demo-fulfill-sqs
      VisibilityTimeout: 30 # tiempo para procesar el mensaje
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FulfillDLQ.Arn 
        maxReceiveCount: 3   # reintentos antes de ir a DLQ
  
  # Shipping
  ShippingDLQ: {Type: AWS::SQS::Queue, Properties: { QueueName: demo-shipping-sqs-dlq } }
  ShippingQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: demo-shipping-sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ShippingDLQ.Arn
        maxReceiveCount: 3 # reintentos antes de ir a DLQ
      VisibilityTimeout: 30 # tiempo para procesar el mensaje

  # Analytics
  AnalyticsDLQ: { Type: AWS::SQS::Queue, Properties: { QueueName: demo-analytics-sqs-dlq } }
  AnalyticsQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: demo-analytics-sqs
      VisibilityTimeout: 30 # tiempo para procesar el mensaje
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AnalyticsDLQ.Arn
        maxReceiveCount: 3  # reintentos antes de ir a DLQ

  PolicyFulfill:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref FulfillQ ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt FulfillQ.Arn
            Condition: { ArnEquals: { aws:SourceArn: !Ref DemoTopic } }

  PolicyAnalytics:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref AnalyticsQ ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt AnalyticsQ.Arn
            Condition: { ArnEquals: { aws:SourceArn: !Ref DemoTopic } }

  PolicyShipping:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref ShippingQ ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: sqs:SendMessage
          Resource: !GetAtt ShippingQ.Arn
          Condition: { ArnEquals: { aws:SourceArn: !Ref DemoTopic } }

  SubFulfill:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DemoTopic
      Protocol: sqs
      Endpoint: !GetAtt FulfillQ.Arn
      RawMessageDelivery: true
      FilterPolicy:
        eventType: ["OrderPlaced","OrderUpdated"]

  SubAnalytics:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DemoTopic
      Protocol: sqs
      Endpoint: !GetAtt AnalyticsQ.Arn
      RawMessageDelivery: true
      FilterPolicy:
        eventType: ["OrderPlaced","OrderShipped"]
        priority: ["high"]

  SubShipping:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DemoTopic
      Protocol: sqs
      Endpoint: !GetAtt ShippingQ.Arn
      RawMessageDelivery: true
      FilterPolicy:
        eventType: ["OrderPlaced"]        # Shipping se dispara cuando se crea la orden
        priority: ["high"]                # opcional para demostrar filtros

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: demo-fanout-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-logs-s3-sqs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility   # ðŸ‘ˆ Faltaba
                  - sqs:GetQueueUrl               # ðŸ‘ˆ Ãštil
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  ProcFulfillment:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: demo-fanout-fulfillment
      Runtime: python3.11
      Handler: fulfillment_worker.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          APP_NAME: fanout
          DATA_BUCKET: demo-data
          AWS_ENDPOINT_URL: http://localstack:4566
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: fanout_fulfillment.zip

  ProcAnalytics:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: demo-fanout-analytics
      Runtime: python3.11
      Handler: analytics_worker.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          APP_NAME: fanout
          DATA_BUCKET: demo-data
          AWS_ENDPOINT_URL: http://localstack:4566
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: fanout_analytics.zip

  ProcShipping:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: demo-fanout-shipping
      Runtime: python3.11
      Handler: shipping_worker.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          APP_NAME: "fanout"
          DATA_BUCKET: "demo-data"
          AWS_ENDPOINT_URL: "http://localstack:4566"
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: "fanout_shipping.zip"

  ESM_Fulfillment:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt FulfillQ.Arn
      FunctionName: !Ref ProcFulfillment
      BatchSize: 10
      Enabled: true

  ESM_Analytics:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt AnalyticsQ.Arn
      FunctionName: !Ref ProcAnalytics
      BatchSize: 10
      Enabled: true

  ESM_Shipping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ShippingQ.Arn
      FunctionName: !Ref ProcShipping
      BatchSize: 10
      Enabled: true
  
  LogFulfillment:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/demo-fanout-fulfillment
      RetentionInDays: 3

  LogAnalytics:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/demo-fanout-analytics
      RetentionInDays: 3

  LogShipping:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/demo-fanout-shipping
      RetentionInDays: 3
  


